#ifndef MATRIX_H
#define MATRIX_H
/*
*This class represent a Matrix and provide functionality common to the Matrix
	Matrixx indexing is zero base which means index of the first row is zero
*/

#include <iostream>
#include <vector>
#include <cstdlib>
#include <iomanip>

using namespace std;

//forward declaration of the Matrix class and <<, >> operators
template< typename T>
class Matrix;

template< typename T>
ostream& operator<<(ostream&, Matrix<T>&);

template< typename T>
istream& operator>>(istream&, Matrix<T>&);


template< typename T>
class Matrix {

	friend ostream& operator<<(ostream&, Matrix<T>&);

	friend istream& operator>>(istream&, Matrix<T>&);

public:
	//default constructor
	Matrix() :MATRIX_ROW_COUNT(10), MATRIX_COLOUMN_COUNT(10)
	{
		initialize(0);
	}

	//constructor with teo argument(#row,#coloumn) 
	Matrix(int rowCount, int coloumnCount) :MATRIX_ROW_COUNT(rowCount), MATRIX_COLOUMN_COUNT(coloumnCount)
	{
		random_initialize();
	}

	//constructor with teo argument(#row,#coloumn,value of the matrix element) 
	Matrix(int rowCount, int coloumnCount, int value) :MATRIX_ROW_COUNT(rowCount), MATRIX_COLOUMN_COUNT(coloumnCount)
	{
		initialize(value);
	}

	//constructor
	Matrix(int rowCount, int coloumnCount, vector<vector<T>>matrix) :MATRIX_ROW_COUNT(rowCount), MATRIX_COLOUMN_COUNT(coloumnCount)
	{
		_matrixs = matrix;
	}

	//copy constructor
	Matrix(Matrix& matrix)
	{
		_matrixs = matrix._matrixs;
		MATRIX_ROW_COUNT = matrix.MATRIX_ROW_COUNT;
		MATRIX_COLOUMN_COUNT = matrix.MATRIX_COLOUMN_COUNT;
	}

	/////////////////////////////////////////Utility functions////////////////////////////////////////////////////////////////////////////////

	vector<vector<T>>&  getVector()
	{
		return this->_matrixs;
	}

	//transpose this matrix(n*m) to m*n one
	Matrix<T>& transpose()
	{
		vector<vector<T>> _tempMatrix;
		_tempMatrix.resize(MATRIX_COLOUMN_COUNT, vector<T>(MATRIX_ROW_COUNT, 0));

		//itarate through the each element and change the element so that the matrix transpose
		for (int i = 0; i < MATRIX_ROW_COUNT; i++)
		{
			for (int j = 0; j < MATRIX_COLOUMN_COUNT; j++)
			{
				_tempMatrix[j][i] = _matrixs[i][j];
			}

			//cout << endl;
		}

		//swap the value of dimension of the matrix
		int temp = MATRIX_ROW_COUNT;
		MATRIX_ROW_COUNT = MATRIX_COLOUMN_COUNT;
		MATRIX_COLOUMN_COUNT = temp;

		//_matrixs = _tempMatrix;
		return *(new Matrix<T>(MATRIX_ROW_COUNT,MATRIX_COLOUMN_COUNT,_tempMatrix));

	}

	//print the matrix using loop
	void printMatrix()
	{
		for (int i = 0; i < MATRIX_ROW_COUNT; i++)
		{
			for (int j = 0; j < MATRIX_COLOUMN_COUNT; j++)
			{
				cout << setw(10) << _matrixs[i][j];
			}

			cout << endl;
		}
	}

	int getRowCount()
	{
		return MATRIX_ROW_COUNT;
	}

	int getColoumnCount()
	{
		return MATRIX_COLOUMN_COUNT;
	}

	//start row, number of rows,start column, number if column
	Matrix<T> subMatrix(int startRow,int rowCount,int startColumn,int columnCount)
	{
		Matrix mat(rowCount, columnCount);

		int matRow = startRow;
		int matColumn = startColumn;
		int constColumn = matColumn;

		for (int i = 0; i < rowCount && matRow < rowCount; i++)
		{
			for (int j = 0; j < columnCount&& matColumn < constColumn + columnCount; j++)
			{
				mat(i, j) = _matrixs[matRow][matColumn];
				matColumn++;
			}

			matColumn = startColumn;
			matRow++;
		}

		return mat;

	}

	////////////////////////////////////operator overload/////////////////////////////////////////////////////////////////////////////////

	Matrix<T>& operator+(Matrix<T>& other)
	{
		if (MATRIX_COLOUMN_COUNT == other.MATRIX_COLOUMN_COUNT && MATRIX_ROW_COUNT == other.MATRIX_ROW_COUNT)
		{
			vector<vector<T>>& otherMat = other.getVector();
			vector<vector<T>>& tempMat = other.getVector();

			for (int i = 0; i < this->getRowCount(); i++)
			{
				for (int j = 0; j < this->getColoumnCount(); j++)
				{
					tempMat[i][j] = _matrixs[i][j] + otherMat[i][j];
				}
			}

			return *(new Matrix<T>(MATRIX_ROW_COUNT, MATRIX_COLOUMN_COUNT, tempMat));
		}

		return *this;
	}

	Matrix<T>& operator-(Matrix<T>& other)
	{

		//if (this->getRowCount() == other.getRowCount() && this->getColoumnCount == other.getColoumnCount())
		if (MATRIX_COLOUMN_COUNT == other.MATRIX_COLOUMN_COUNT && MATRIX_ROW_COUNT == other.MATRIX_ROW_COUNT)
		{
			vector<vector<T>>& otherMat = other.getVector();
			vector<vector<T>>& tempMat = other.getVector();

			for (int i = 0; i < this->getRowCount(); i++)
			{
				for (int j = 0; j < this->getColoumnCount(); j++)
				{
					tempMat[i][j] = _matrixs[i][j] - otherMat[i][j];
				}
			}

			return *(new Matrix<T>(MATRIX_ROW_COUNT, MATRIX_COLOUMN_COUNT, tempMat));
		}

		return *this;

	}

	Matrix<T>& operator=(Matrix<T>& other)
	{
		if (this != &other)
		{
			vector<vector<T>>& vec = other.getVector();
			this->MATRIX_ROW_COUNT = other.MATRIX_ROW_COUNT;
			this->MATRIX_COLOUMN_COUNT = other.MATRIX_COLOUMN_COUNT;

			//matrix column size is not resizing some times knowingly when =oprator called in methods other than constructor
			//find what is the problem and find the solution

			this->_matrixs.resize(MATRIX_ROW_COUNT, vector<T>(MATRIX_COLOUMN_COUNT, 0));

			for (int i = 0; i < MATRIX_ROW_COUNT; i++)
			{
				for (int j = 0; j < MATRIX_COLOUMN_COUNT; j++)
				{
					_matrixs[i][j] = vec[i][j];
				}
			}
		}

		return *this;
	}

	Matrix<T>& operator*(Matrix<T>& matrixToMultiply)
	{
		vector<vector<T>> _secondVec = matrixToMultiply.getVector();
		Matrix<T>* _tempMat = new Matrix(MATRIX_ROW_COUNT, matrixToMultiply.getColoumnCount());
		_tempMat->initialize(0);


		vector<vector<T>>& _tempVec = _tempMat->getVector();

		if (this->MATRIX_COLOUMN_COUNT == matrixToMultiply.getRowCount())
		{
			for (int i = 0; i < MATRIX_ROW_COUNT; i++)
			{
				for (int j = 0; j < matrixToMultiply.getColoumnCount(); j++)
				{
					for (int k = 0; k < MATRIX_COLOUMN_COUNT; k++)
					{
						_tempVec[i][j] += (_matrixs[i][k] * _secondVec[k][j]);
					}
				}
			}

		}
		else
		{
			cout << "you cannot multiply these matrix" << endl;
		}

		return *_tempMat;
	}

	/*
	 *this is overloaded to mltiply matrix with scalar but wise versa is not true,identify why and fix the problem.
	 *
	 */
	Matrix<T>& operator*(double scalar)
	{
		for (int i = 0; i < MATRIX_ROW_COUNT;i++)
		{
			for (int j = 0; j < MATRIX_COLOUMN_COUNT;j++)
			{
				_matrixs[i][j] = scalar*_matrixs[i][j];
			}
		}
		return *(new Matrix<T>(MATRIX_ROW_COUNT,MATRIX_COLOUMN_COUNT,_matrixs));
	}

	//this can be used to _matrix[i][j]  
	T& operator()(int i, int j)
	{
		return _matrixs[i][j];
	}

protected:

private:
	vector<vector<T>> _matrixs;

	//important constant veriable
	int MATRIX_ROW_COUNT;
	int MATRIX_COLOUMN_COUNT;

	void initialize(T value)
	{
		_matrixs.resize(MATRIX_ROW_COUNT, vector<T>(MATRIX_COLOUMN_COUNT, value));
	}

	void random_initialize()
	{
		_matrixs.resize(MATRIX_ROW_COUNT, vector<T>(MATRIX_COLOUMN_COUNT, 0));

		for (int i = 0; i < MATRIX_ROW_COUNT; i++)
		{
			for (int j = 0; j < MATRIX_COLOUMN_COUNT; j++)
			{
				_matrixs[i][j] = 1 + rand() % 10;;
			}
		}

	}

};

#endif
