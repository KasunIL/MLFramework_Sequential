#ifndef LINEAR_REGRESSION_H
#define LINEAR_REGRESSION_H

#include "Matrix.h"
#include "TextReader.h"

class LinearRegression{

public:
	
	LinearRegression(TextReader& reader)
	{
		_matrix = reader.getMatrix();
		Matrix<double> xmat(_matrix.getRowCount(), _matrix.getColoumnCount());
		_xMatrix = xmat;
		
		Matrix<double> ymat(_matrix.getRowCount(), 1);

		//since matrix are defaultly instantiate as 10*10 matrix following assingment assinges values to first column of the _yMatrix
		//change the copy constructor so that this issue is fixed.
		_yMatrix = ymat;

		initialize();
	}

	/*
		in genaral case we should have the constructor which take arguments of data adapter, costMinimization algorithms at least.
		
		LinearReregression(TextReader,MinimizationAlgo);

		MinimizationAlgo represents the the algorithems like gradient decent, DBFG, FBFG like algorithms.
	
	*/
	
	//should implement the ~LinearRegression()
	//~LinearRegression();

	void initialize()
	{
	
		_xMatrix = _matrix.subMatrix(0, _matrix.getRowCount(), 0, _matrix.getColoumnCount()-1 );
		
		//add column to the _xMatrix, and make that  columns values to the 1, so that the theta(0) represent the constant.
		_xMatrix = Matrix<double>::addColumn(_xMatrix);
	
		//assuming the last column of the matrix contains "y"
		_yMatrix = _matrix.subMatrix(0, _matrix.getRowCount(), _matrix.getColoumnCount() - 1, 1);

		//theta matrix is column vector which has rows same as the _xMatrix.getRowCount()
		Matrix<double> theta(_xMatrix.getColoumnCount(), 1);

		_thetaMat = theta;

		m = _matrix.getRowCount();
		alpha = 0.003;

	//  loging the information
	//	_xMatrix.printMatrix();
	//	cout << endl << endl;
	// _yMatrix.printMatrix();

		double c =cost();
		int i = 0;
		while (c>0.1)
		{
			cout << "cost is " << c << endl;
			gradientDecend();
			c = cost();
			i++;
		}

		cout << "number of iteration" << i << endl;
		//print the theta matrix(solved)
		_thetaMat.printMatrix();
		cout << endl;
	}

	Matrix<double> gradientDecend()
	{
		/*
		Matrix<double> _xtheta = _xMatrix*_thetaMat;
		Matrix<double> _xthey = _xtheta - _yMatrix;
		Matrix<double> _xtheyT = _xthey.transpose();
		Matrix<double> _xtheyTX = _xtheyT*_xMatrix;
		Matrix<double> _xtheyTXVal = _xtheyTX*(0.001 / m);
		*/
		
		Matrix<double> val = (((_xMatrix*_thetaMat - _yMatrix).transpose())*_xMatrix)*(0.02 / m);
		Matrix<double> valT = val.transpose();
		_thetaMat = _thetaMat -valT;
		return _thetaMat;
	}


	double cost()
	{
		Matrix<double> x1 = _xMatrix*_thetaMat;
		Matrix<double> x2 = (x1 - _yMatrix);
		Matrix<double> x2T = x2.transpose();
		Matrix<double> cost = x2T*x2;
		
		return cost(0, 0);
	}

protected:


private:
	
	//Basic matrix needed to calculate the other functions in LinearRegression

	//Matrix are defaultly instantiate as 10,10 matrix 
	Matrix<double> _thetaMat;
	Matrix<double> _xMatrix;
	Matrix<double> _yMatrix;

	//matrix which stores the matrix returing from the textReader.getMatrix()
	Matrix<double> _matrix;

	double alpha;
	int m;

	//TextReader reader;
};



#endif
