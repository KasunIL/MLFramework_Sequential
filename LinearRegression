#ifndef LINEAR_REGRESSION_H
#define LINEAR_REGRESSION_H

#include "Matrix.h"
#include "TextReader.h"

class LinearRegression{

public:
	
	LinearRegression(TextReader& reader)
	{
		_matrix = reader.getMatrix();
		Matrix<double> xmat(_matrix.getRowCount(), _matrix.getColoumnCount() - 1);
		_xMatrix = xmat;
		
		Matrix<double> ymat(_matrix.getRowCount(), 1);

		//since matrix are defaultly instantiate as 10*10 matrix following assingment assinges values to first column of the _yMatrix
		//change the copy constructor so that this issue is fixed.
		_yMatrix = ymat;

		initialize();
	}

	/*
		in genaral case we should have the constructor which take arguments of data adapter, costMinimization algorithms at least.
		
		LinearReregression(TextReader,MinimizationAlgo);

		MinimizationAlgo represents the the algorithems like gradient decent, DBFG, FBFG like algorithms.
	
	*/
	
	//should implement the ~LinearRegression()
	//~LinearRegression();

	void initialize()
	{
		_xMatrix = _matrix.subMatrix(0, _matrix.getRowCount(), 0, _matrix.getColoumnCount() - 1);

		//assuming the last column of the matrix contains "y"
		_yMatrix = _matrix.subMatrix(0, _matrix.getRowCount(), _matrix.getColoumnCount() - 1, 1);

		//theta matrix is column vector which has rows same as the _xMatrix.getRowCount()
		Matrix<double> theta(_xMatrix.getRowCount(), 1);

		_thetaMat = theta;

		m = _matrix.getRowCount();
		alpha = 0.03;

	//  loging the information
	//	_xMatrix.printMatrix();
	//	cout << endl << endl;
	// _yMatrix.printMatrix();

		gradientDecend();

	}

	Matrix<double> gradientDecend()
	{
		_thetaMat = _thetaMat - (((_xMatrix*_thetaMat - _yMatrix).transpose())*_xMatrix)*(alpha / m);
		return _thetaMat;
	}

	double cost()
	{
	
	}

protected:


private:
	
	//Basic matrix needed to calculate the other functions in LinearRegression

	//Matrix are defaultly instantiate as 10,10 matrix 
	Matrix<double> _thetaMat;
	Matrix<double> _xMatrix;
	Matrix<double> _yMatrix;

	//matrix which stores the matrix returing from the textReader.getMatrix()
	Matrix<double> _matrix;

	double alpha;
	int m;

	//TextReader reader;
};



#endif
