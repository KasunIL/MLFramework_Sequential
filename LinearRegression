#ifndef LINEAR_REGRESSION_H
#define LINEAR_REGRESSION_H

#include "MatrixS\Matrix.h"

class LinearRegression{

public:
	LinearRegression()
	{
		
	}
	~LinearRegression();

	void initialize()
	{
		Matrix<double> mat(2, 1);
		Matrix<double> xmat(20, 1);
		Matrix<double> ymat(20, 1);

		_thetaMat = mat;
		_theta1 = -_thetaMat(0,0);
		_theta1 = -_thetaMat(1, 0);

		//how to read data from file;



		_xMatrix = xmat;
		_yMatrix = ymat;

	}

	void gradientDecend()
	{
		sigma(0);
		double m = _yMatrix.getRowCount();
		while (true)
		{
			_thetaMat(0, 0) = _thetaMat(0, 0) - _alpha*_sigma1 / m;
			_thetaMat(0, 1) = _thetaMat(0, 0) - _alpha*_sigma2 / m;

		}

	}

	void sigma(int val)
	{
		double sigmaTheta1=0;
		double sigmaTheta2 = 0;

		for (int i = 0; i < _yMatrix.getRowCount(); i++)
		{
			sigmaTheta1 += (hyphothisis(_xMatrix(0, i)) - _yMatrix(0, i));
			sigmaTheta2 += (hyphothisis(_xMatrix(0, i)) - _yMatrix(0, i))*_xMatrix(0, i);
		}

		
		_sigma1 = sigmaTheta1;
		_sigma2 = sigmaTheta2;
	}
	
	double hyphothisis(double val)
	{
		return _thetaMat(0,0) + _thetaMat(0,1) * val;
	}

protected:


private:
	Matrix<double> _thetaMat;
	Matrix<double> _xMatrix;
	Matrix<double> _yMatrix;

	double _theta1;
	double _theta2;
	double _alpha=0.05;

	double _sigma1=0;
	double _sigma2=0;
};



#endif
